---
import { getImage, type LocalImageProps, type RemoteImageProps } from 'astro:assets';
import type { GetImageResult, ImageOutputFormat } from '../dist/@types/astro';
import { isESMImportedImage } from '../dist/assets/internal';
import { AstroError, AstroErrorData } from '../dist/core/errors/index.js';
import type { HTMLAttributes } from '../types';

type Props = (LocalImageProps | RemoteImageProps) & {
	formats?: ImageOutputFormat[];
	fallbackFormat?: ImageOutputFormat;
	pictureAttributes?: HTMLAttributes<'picture'>;
};

const { formats = ['webp'], pictureAttributes = {}, ...props } = Astro.props;

if (props.alt === undefined || props.alt === null) {
	throw new AstroError(AstroErrorData.ImageMissingAlt);
}

const optimizedImages: GetImageResult[] = await Promise.all(
	formats.map(
		async (format) =>
			await getImage({ ...props, format: format, widths: props.widths, densities: props.densities })
	)
);

const fallbackFormat =
	props.fallbackFormat ?? isESMImportedImage(props.src)
		? ['svg', 'gif'].includes(props.src.format)
			? props.src.format
			: 'png'
		: 'png';

const fallbackImage = await getImage({
	...props,
	format: fallbackFormat,
	widths: props.widths,
	densities: props.densities,
});

const additionalAttributes: Record<string, any> = {};
if (fallbackImage.srcSet.values.length > 0) {
	additionalAttributes.srcset = fallbackImage.srcSet.attribute;
}
---

<picture {...pictureAttributes}>
	{
		Object.entries(optimizedImages).map(([_, image]) => (
			<source
				srcset={`${image.src}${
					image.srcSet.values.length > 0 ? ' , ' + image.srcSet.attribute : ''
				}`}
				type={'image/' + image.options.format}
			/>
		))
	}
	<img src={fallbackImage.src} {...additionalAttributes} {...fallbackImage.attributes} />
</picture>
